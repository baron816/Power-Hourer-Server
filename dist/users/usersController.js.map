{"version":3,"sources":["../../src/users/usersController.js"],"names":["req","res","_id","user","find","owner","playlistsData","playlists","map","playlistId","title","thumbnail","exposed","json","userPlaylists","next","idToken","headers","authorization","googleId","findOne","playlist","excludeKeys","token","newUser","usr","save","e","err","findOrCreateUser"],"mappings":";;;;;;;;uDAMO,iBAA6BA,GAA7B,EAAkCC,GAAlC;AAAA;;AAAA;AAAA;AAAA;AAAA;AACEC,eADF,GACSF,IAAIG,IADb,CACED,GADF;AAAA;AAAA,mBAGqB,wBAASE,IAAT,CAAc,EAACC,OAAOH,GAAR,EAAd,CAHrB;;AAAA;AAGDI,yBAHC;AAICC,qBAJD,GAIaD,cAAcE,GAAd,CAAkB;AAAA,kBAAEN,GAAF,SAAEA,GAAF;AAAA,kBAAOG,KAAP,SAAOA,KAAP;AAAA,kBAAcI,UAAd,SAAcA,UAAd;AAAA,kBAA0BC,KAA1B,SAA0BA,KAA1B;AAAA,kBAAiCC,SAAjC,SAAiCA,SAAjC;AAAA,kBAA4CC,OAA5C,SAA4CA,OAA5C;AAAA,qBAA0D,EAACV,QAAD,EAAMG,YAAN,EAAaI,sBAAb,EAAyBC,YAAzB,EAAgCC,oBAAhC,EAA2CC,gBAA3C,EAA1D;AAAA,aAAlB,CAJb;;;AAMLX,gBAAIY,IAAJ,CAAS,EAACN,oBAAD,MAAe,EAAxB;;AANK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeO,a;;;;;;wDASf,kBAAgCd,GAAhC,EAAqCC,GAArC,EAA0Cc,IAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AACiBC,mBADjB,GAC4BhB,IAAIiB,OADhC,CACEC,aADF;;;AAGL,sCAAWH,IAAX,EAAiBC,OAAjB;AAAA,oEAA0B,kBAAgBG,QAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACP,oBAAKC,OAAL,CAAa,EAACD,kBAAD,EAAb,CADO;;AAAA;AACpBhB,4BADoB;;AAAA,6BAGpBA,IAHoB;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAII,wBAASC,IAAT,CAAc,EAACC,OAAOF,KAAKD,GAAb,EAAd,CAJJ;;AAAA;AAIlBI,qCAJkB;AAKhBC,iCALgB,GAKJD,cAAcE,GAAd,CAAkB;AAAA,iCAAYa,SAASC,WAAT,CAAqB,eAArB,CAAZ;AAAA,yBAAlB,CALI;AAOhBC,6BAPgB,GAOR,qBAAUpB,KAAKD,GAAf,CAPQ;;AAQtBD,4BAAIY,IAAJ,CAAS,EAACU,YAAD,EAAQhB,oBAAR,MAAsB,EAA/B;AARsB;AAAA;;AAAA;AAUhBiB,+BAVgB,GAUN,wBAAS,EAACL,kBAAD,EAAT,CAVM;;;AAYtB,4BAAI;AACEM,6BADF,GACQD,QAAQE,IAAR,EADR;AAEIH,gCAFJ,GAEY,qBAAUE,IAAIvB,GAAd,CAFZ;;AAGFD,8BAAIY,IAAJ,CAAS,EAACU,aAAD,EAAQhB,WAAW,EAAnB,EAAT;AACD,yBAJD,CAIE,OAAOoB,CAAP,EAAU;AACVZ,+BAAKa,GAAL;AACD;;AAlBqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAA1B;;AAAA;AAAA;AAAA;AAAA;;AAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,gB;;;;;AAftB;;;;AACA;;;;AACA;;;;AACA;;AACA","file":"usersController.js","sourcesContent":["import User from './userModel';\nimport Playlist from '../playlists/playlistModel';\nimport GoogleAuth from 'google-auth-library';\nimport { signToken } from '../auth/auth';\nimport googleAuth from '../auth/googleAuth';\n\nexport async function userPlaylists(req, res) {\n  const {_id} = req.user;\n\n  var playlistsData = await Playlist.find({owner: _id})\n  const playlists = playlistsData.map(({_id, owner, playlistId, title, thumbnail, exposed}) => ({_id, owner, playlistId, title, thumbnail, exposed}));\n\n  res.json({playlists} || {});\n}\n\nexport async function findOrCreateUser(req, res, next) {\n  const {authorization: idToken} = req.headers;\n\n  googleAuth(next, idToken, async function (googleId) {\n    var user = await User.findOne({googleId});\n\n    if (user) {\n      var playlistsData = await Playlist.find({owner: user._id})\n      const playlists = playlistsData.map(playlist => playlist.excludeKeys('playlistItems'));\n\n      const token = signToken(user._id);\n      res.json({token, playlists} || {});\n    } else {\n      const newUser = new User({googleId});\n\n      try {\n        var usr = newUser.save();\n        const token = signToken(usr._id);\n        res.json({token, playlists: []})\n      } catch (e) {\n        next(err)\n      }\n    }\n  })\n}\n"]}